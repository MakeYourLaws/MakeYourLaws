#!/bin/sh -e

### BEGIN INIT INFO
# Provides:          resque-pool-makeyourlaws
# Required-Start:    $local_fs $remote_fs $network $syslog
# Required-Stop:     $local_fs $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: resque-pool init script for makeyourlaws
# Description:       resque-pool manages the resque workers
### END INIT INFO

# configure these values here or in /etc/default/resque-pool
# make sure your pidfile here matches your monitrc
app_name="makeyourlaws"
pidfile="/home/makeyourlaws/makeyourlaws.org/shared/tmp/pids/resque_pool.pid"
app_dir="/home/makeyourlaws/makeyourlaws.org/current"
run_as_user="makeyourlaws"
sleep_time_during_restart=5
stop_schedule="QUIT/30/INT/10/KILL/5"
ruby="/usr/local/rvm/bin/rvm"
environment="production"
stdout_log="${app_dir}/log/resque_pool.stdout.log"
stderr_log="${app_dir}/log/resque_pool.stderr.log"

# override above values, and set any other env variables you need
if [ -f /etc/default/resque ] ; then
  . /etc/default/resque
fi
if [ -f /etc/default/${app_name}_resque ] ; then
  . /etc/default/${app_name}_resque
fi

case "$1" in
  start)
    # I'm assuming that you are using bundler.  If you are using rip or
    # something else, you'll need to change this.  Remember to
    # keep the double-dash; e.g.: --startas CMD -- ARGS
	echo 'starting resque-pool'
    start-stop-daemon --start --pidfile ${pidfile} \
      --chuid ${run_as_user} --chdir ${app_dir} \
      --startas ${ruby} -- default do bundle exec \
      resque-pool -d -a ${app_name} -p ${pidfile} -E ${environment} -o ${stdout_log} -e ${stderr_log}
    ;;
  reload)
    echo 'sending HUP to resque-pool'
    start-stop-daemon --stop --pidfile ${pidfile} --signal HUP
    ;;
  graceful-stop)
    echo 'sending QUIT to resque-pool'
    start-stop-daemon --stop --pidfile ${pidfile} --signal QUIT
    ;;
  quick-stop)
    echo 'sending INT to resque-pool'
    start-stop-daemon --stop --pidfile ${pidfile} --signal INT
    ;;
  stop)
    echo "stopping resque-pool per schedule ${stop_schedule}"
    start-stop-daemon --stop --pidfile ${pidfile} --retry=${stop_schedule}
    ;;
  status)
    if test -e ${pidfile}
      then
  	    ps -f -p $(cat ${pidfile}) | sed -n 2p
  	  else
		echo 'no resque-pool PID found'
  	    exit 3
  	fi
    ;;
  restart)
    if test -e ${pidfile}
	  then
	  	if ps -f -p $(cat ${pidfile})
		then
  	      $0 stop
  	      sleep ${sleep_time_during_restart}
		else
		  echo 'resque-pool PID found, but nothing there'
	    fi
	  else
		echo 'no resque-pool PID found'
	fi
    $0 start
    ;;
  *)
    echo "Usage: $0 {start|stop|graceful-stop|quick-stop|restart|reload|status}"
    exit 1
    ;;
esac

# vim:ft=sh