#!/bin/sh -e

### BEGIN INIT INFO
# Provides:          resque-scheduler-makeyourlaws
# Required-Start:    $local_fs $remote_fs $network $syslog
# Required-Stop:     $local_fs $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: resque-scheduler init script for makeyourlaws
# Description:       resque-scheduler schedules resque tasks
### END INIT INFO

# make sure your pidfile here matches your monitrc
app_name="makeyourlaws"
pidfile="/home/makeyourlaws/makeyourlaws.org/shared/tmp/pids/scheduler.pid"
app_dir="/home/makeyourlaws/makeyourlaws.org/current"
run_as_user="makeyourlaws"
sleep_time_during_restart=5
stop_schedule="QUIT/30/INT/10/KILL/5"
ruby="/usr/local/rvm/bin/rvm"
environment="production"
logfile="${app_dir}/log/scheduler.log"

case "$1" in
  start)
    # I'm assuming that you are using bundler.  If you are using rip or
    # something else, you'll need to change this.  Remember to
    # keep the double-dash; e.g.: --startas CMD -- ARGS
	echo 'starting resque-scheduler'
    start-stop-daemon --start --pidfile ${pidfile} \
      --chuid ${run_as_user} --chdir ${app_dir} \
      --startas ${ruby} -- default do bundle exec \
	  rake APP_NAME=${app_name} BACKGROUND=yes TERM_CHILD=1  \
	  RAILS_ENV=${environment} LOGFILE=${logfile} \
	  PIDFILE=${pidfile} VERBOSE=1 MUTE=1 resque:scheduler  # DYNAMIC_SCHEDULE=yes

	  # for some reason the binary doesn't set the pidfile properly
      # resque-scheduler --app-name ${app_name} --background \
      # --environment ${environment} --logfile ${logfile} \
      # --pidfile ${pidfile} --verbose --quiet # --dynamic-schedule
    ;;
  stop)
    echo "stopping resque-scheduler per schedule ${stop_schedule}"
    start-stop-daemon --stop --pidfile ${pidfile} --signal QUIT --retry=${stop_schedule}
    ;;
  restart)
	if test -e ${pidfile}
	  then
	  	if ps -f -p $(cat ${pidfile})
		then
		  $0 stop
		  sleep ${sleep_time_during_restart}
		else
		  echo 'resque-scheduler PID found, but nothing there'
	    fi
	  else
		echo 'no resque-scheduler PID found'
	fi
	$0 start
    ;;
  status)
	if test -e ${pidfile}
      then
	    ps -f -p $(cat ${pidfile}) | sed -n 2p
	  else
  		echo 'no resque-scheduler PID found'
	    exit 3
	fi
    ;;
  *)
    echo "Usage: $0 {start|stop|restart|status}"
    exit 1
    ;;
esac

# vim:ft=sh