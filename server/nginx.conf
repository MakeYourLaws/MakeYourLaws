
user www-data;
worker_processes  7; # 4 # up to # cores (check lscpu)

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
error_log  logs/error.log  info;

pid          logs/nginx.pid;


events {
    worker_connections  1024;
    multi_accept on;
}


http {
    passenger_root /usr/local/rvm/gems/ruby-2.1.0/gems/passenger-4.0.37;
    passenger_ruby /usr/local/rvm/gems/ruby-2.1.0/wrappers/ruby;

    passenger_user_switching on;
    passenger_show_version_in_header off;
    passenger_friendly_error_pages off;

    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    include         mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] $host "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;
    reset_timedout_connection on;

    proxy_cache_key                 $scheme$host$request_uri;
    proxy_cache_path                /var/cache/nginx/cached levels=2:2 keys_zone=global:64m inactive=60m max_size=1G;

    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_static on; # to serve pre-gzipped version
    gzip_proxied any; #expired no-cache no-store private auth;
    gzip_comp_level 6; # 2
    # gzip_buffers 16 8k;
    gzip_http_version 1.1;
    # gzip_types already includes text/html, don't include or you get a warning
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_min_length 1000;

    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;

    # A given server still needs to set "ssl on;"; this just centralizes it
    ssl_certificate /etc/ssl/localcerts/makeyourlaws.org.combined.crt;
    ssl_trusted_certificate /etc/ssl/localcerts/makeyourlaws.org.combined.crt;
    ssl_certificate_key /etc/ssl/localcerts/makeyourlaws.org.key;
    ssl_dhparam /etc/ssl/localcerts/dh2048.pem;
    ssl_prefer_server_ciphers On;
    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    ssl_session_cache    shared:SSL:10m;
    ssl_session_timeout  10m;
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.4.4 8.8.8.8 valid=300s;
    resolver_timeout 10s;
    # ssl_verify_client optional;
    # ssl_client_certificate /etc/ssl/localcerts/makeyourlaws.org.combined.crt;

    # Now for voodoo...

    # https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/ recommends:
    ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;
    # ryanc recommends:
    # ssl_ciphers -ALL:!aNULL:!eNULL:!EXPORT:!LOW:!MEDIUM:aRSA+kEECDH:aRSA+kEDH:@STRENGTH:HIGH;
    # others:
    # ssl_ciphers ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA:DHE-DSS-AES256-SHA:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA;
    # ssl_ciphers AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-RC4-SHA:ECDHE-RSA-AES256-SHA:RC4:HIGH:!MD5:!CBC:!aNULL:!EDH;
    # ssl_ciphers ECDHE-RSA-AES128-SHA256:AES128-GCM-SHA256:RC4:HIGH:!MD5:!aNULL:!EDH;
    # ssl_ciphers ALL:!ADH:!EXP:!LOW:!RC2:!3DES:!SEED:!RC4:+HIGH:+MEDIUM;


    # the wiki server does not have SSL. this will generate a domain mismatch error, but it'll redirect to non-https wiki.
#    server {
#          listen 443;
#          ssl on;
#          proxy_set_header X-Forwarded-Proto $scheme;
#          server_name    wiki.makeyourlaws.org;
#          return 301  http://wiki.makeyourlaws.org$request_uri;
#    }

    # Uncomment if nginx-naxsi installed
    # include naxsi_core.rules;

    # include conf.d/*.conf;
    # include sites-enabled/*;

    server {
        listen 80;
        server_name wiki.makeyourlaws.org;
    #  root /home/mylwiki/wiki.makeyourlaws.org;
        root /home/mylwiki/mylwiki-1.19.1;
        index index.php;

        client_max_body_size 5m;
        client_body_timeout 60;

        location / {
            try_files $uri $uri/ @rewrite;
        }

        location @rewrite {
            rewrite ^/(.*)$ /index.php?title=$1&$args;
        }

        location ^~ /maintenance/ {
            return 403;
        }

        location ~ \.php$ {
            include fastcgi_params;

            # this is a kluge
            fastcgi_param  SCRIPT_FILENAME    /home/mylwiki/mylwiki-1.19.1/$fastcgi_script_name;
	        try_files $uri =404;
            fastcgi_pass 127.0.0.1:9000;
            # fastcgi_pass unix:/tmp/php-fpm.sock;
        }

        location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
            try_files $uri /index.php;
            expires max;
            log_not_found off;
        }

        location = /_.gif {
            expires max;
            empty_gif;
        }

        location ^~ /cache/ {
            deny all;
        }
    }

    server {
        listen 81;
        server_name 4q7nn5htjdv7ccxn.onion;

        proxy_set_header  X-Real-IP  $remote_addr;
        proxy_set_header  X-Forwarded-Proto $scheme;
        proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header  Host $http_host;
        proxy_set_header  X-Url-Scheme $scheme;
        proxy_set_header  X-Tor true;
        proxy_redirect    off;
        proxy_max_temp_file_size 0;

        root /home/makeyourlaws/makeyourlaws.org/current/public;
        server_name_in_redirect off;
        passenger_enabled on;

        location ~* ^/assets/ {
            # Per RFC2616 - 1 year maximum expiry
	        # http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html
	        expires 1y;
	        add_header Cache-Control public;

	        # Some browsers still send conditional-GET requests if there's a
	        # Last-Modified header or an ETag header even if they haven't
	        # reached the expiry date sent in the Expires header.
	        #  add_header Last-Modified "";
	        #  add_header ETag "";
	        break;
        }

    }



    server {
        listen 80 default_server;
        proxy_set_header X-Forwarded-Proto $scheme;
	    # server_name   ~^(www\.)?(?<domain>.+)$; # captures it to set $server_name
        server_name    makeyourlaws.org www.makeyourlaws.org makeyourlaws.com www.makeyourlaws.com makeyourlaws.net www.makeyourlaws.net makeyourlaw.org www.makeyourlaw.org makeyourlaw.com www.makeyourlaw.com makeyourlaw.net www.makeyourlaw.net;

        rewrite ^(.*)$ https://$host$1 permanent;
        # return 301  https://makeyourlaws.org$request_uri;
    }

    server {
        listen 443;
        ssl on;

        proxy_set_header  X-Real-IP  $remote_addr;
        proxy_set_header  X-Forwarded-Proto $scheme;
        proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header  Host $http_host;
        proxy_set_header  X-Url-Scheme $scheme;
        proxy_redirect    off;
        proxy_max_temp_file_size 0;

        server_name makeyourlaws.org www.makeyourlaws.org makeyourlaws.com www.makeyourlaws.com makeyourlaws.net www.makeyourlaws.net makeyourlaw.org www.makeyourlaw.org makeyourlaw.com www.makeyourlaw.com makeyourlaw.net www.makeyourlaw.net;
        root /home/makeyourlaws/makeyourlaws.org/current/public;
        server_name_in_redirect off;
        passenger_enabled on;
        add_header Strict-Transport-Security "max-age=31536000;"; #  includeSubdomains";

        if ($host != 'makeyourlaws.org' ) {
          rewrite  ^/(.*)$  https://makeyourlaws.org/$1  permanent;
        }

        location ~* ^/assets/ {
            # Per RFC2616 - 1 year maximum expiry
            # http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html
            expires 1y;
            add_header Cache-Control public;

            proxy_cache global;
            proxy_cache_valid  any 1h;
            proxy_cache_use_stale updating;

            # Some browsers still send conditional-GET requests if there's a
            # Last-Modified header or an ETag header even if they haven't
            # reached the expiry date sent in the Expires header.
            #    add_header Last-Modified "";
            #    add_header ETag "";
            break;
        }
    }
}
